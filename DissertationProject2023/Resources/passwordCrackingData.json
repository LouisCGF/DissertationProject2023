[
    {
        "intro": "Welcome to the world of password cracking! This module is designed to introduce you to the basic techniques of password cracking and provide a hands-on guide to using the popular Hashcat tool. By the end of this module, you'll understand the principles of password cracking, know how to use Hashcat, and be able to crack simple passwords on your own.",
        "introNote": "Note: Password cracking can be a powerful skill, but it also comes with ethical responsibilities. Always use your newfound knowledge for legal and ethical purposes, such as recovering forgotten passwords or testing the security of your own systems.",
        "section1_1": "Password cracking is the process of attempting to gain unauthorized access to a system or account by guessing or decrypting a user's password. This is often done by exploiting the weaknesses in password hashing algorithms, user habits, or system vulnerabilities. Here's a more detailed look at the common techniques used in password cracking:\n",
        "section1_2": "This method involves systematically attempting every possible combination of characters until the correct password is found. Brute force attacks can be time-consuming and resource-intensive, especially for long and complex passwords. However, they are guaranteed to find the password eventually, given enough time and resources. Therefore, this is the only password cracking technique that is technically 100% effective.\nThere are two main types of brute force attacks:\n\na. Simple Brute Force: The attacker tries all possible character combinations without any limitations or restrictions.\n\nb. Masked Brute Force: The attacker uses a predefined pattern or template (known as a mask) to reduce the number of attempts. For example, if an attacker knows that the target password is eight characters long and starts with 'P', the mask can be set to 'P???????', where each '?' represents an unknown character.",
        "section1_3": "Instead of trying every possible character combination, dictionary attacks involve using a list of known words, phrases, or common passwords to guess the target password. The attacker may use a custom wordlist or download a pre-built wordlist containing thousands or millions of words. Dictionary attacks are often faster than brute force attacks, but they rely on the assumption that the target password is a word or phrase found in the wordlist.",
        "section1_4": "Rainbow tables are precomputed tables containing the hash values of a large number of character combinations. When an attacker obtains the hash of a target password, they can search the rainbow table for a matching hash value. If a match is found, the corresponding plaintext password can be used to access the account. Rainbow tables can speed up the password cracking process, but they require significant storage space and may not be effective against modern hashing algorithms with built-in protections, such as salt.",
        "section1_5": "Hybrid attacks combine the principles of brute force and dictionary attacks to find passwords that contain a mix of words and character substitutions. For example, a hybrid attack might attempt to replace the letter 'o' with the number '0' in a dictionary word or append numbers or special characters to a word. This approach can be more effective than simple dictionary attacks, as it takes into account common password patterns and user habits.",
        "section1_6": "Understanding these basic techniques will provide a strong foundation for using password cracking tools like Hashcat and help you develop more advanced strategies as you gain experience in the field.",
        "section1_7": "Let's move onto the next page where you'll be introduced to the Hashcat tool...",
        "section2_1": "Hashcat is a powerful and versatile open-source password recovery tool that supports a wide range of password cracking techniques and hashing algorithms. It is renowned for its performance, flexibility, and efficiency, making it one of the most popular password cracking tools in the cybersecurity community. Here's a more detailed look at the features and capabilities of Hashcat:\n",
        "section2_2": "Hashcat supports various attack modes, such as:\n\na. Straight (Dictionary) Attack: This mode uses a wordlist to guess the target password.\n\nb. Brute Force Attack: This mode tries all possible character combinations based on a given character set and length.\n\nc. Combination Attack: This mode combines words from two different wordlists to create new password candidates.\n\nd. Rule-based Attack: This mode applies a set of rules to each word in a wordlist, allowing for character substitutions, insertions, deletions, and more.\n\ne. Hybrid Attack: This mode combines dictionary and brute force attacks by appending or prepending characters to words from a wordlist.",
        "section2_3": "Hashcat supports a wide range of hashing algorithms, including:\n\na. General-purpose algorithms: MD5, SHA-1, SHA-256, SHA-512, and more.\n\nb. Cryptographic algorithms: bcrypt, scrypt, Argon2, and more.\n\nc. Operating system-specific algorithms: Windows NTLM, macOS, and Linux hashes.\n\nd. Database-specific algorithms: MySQL, Oracle, and PostgreSQL hashes.\n\ne. Application-specific algorithms: WordPress, Drupal, Joomla, and more.",
        "section2_4": "Hashcat takes advantage of the parallel processing capabilities of modern GPUs (Graphics Processing Units) to dramatically speed up password cracking. This allows the tool to perform significantly faster than CPU-based password crackers, especially for computationally intensive tasks like brute force attacks.",
        "section2_5": "Hashcat is available for multiple operating systems, including Windows, macOS, and Linux. This makes it a versatile tool that can be used on a wide range of systems and in various environments.",
        "section2_6": "Hashcat is highly customizable, with a range of configuration options and settings. Users can create custom character sets, masks, and rules to tailor the tool's behavior to their specific needs. Moreover, advanced users can create their own plugins to extend the functionality of Hashcat or implement support for new hashing algorithms.",
        "section2_7": "By understanding the features and capabilities of Hashcat, you'll be better equipped to use the tool effectively and efficiently, making it easier for you to crack passwords and improve your skills in the field of cybersecurity.",
        "section2_8": "On the next page you'll have an opportunity to practice some Hashcat commands on the simulated terminal...",
        "section3_1": "A Unix terminal, also known as a command-line interface (CLI), is a powerful tool that enables users to interact with Unix-based operating systems (e.g., Linux, macOS) by typing textual commands. It provides greater control and flexibility compared to graphical user interfaces (GUIs), which rely on visual elements like buttons and menus for user interaction. In a Unix terminal, users can perform various tasks, such as navigating the file system, creating and editing files, installing and managing software, and executing scripts or programs. It is especially useful for system administration, programming, and other advanced tasks, as it allows users to automate processes and perform complex operations more efficiently.",
        "section3_2": "It has an input field and an output box. A real terminal isn't actually like this, but it is easier to start using it this way.",
        "section3_3": "Command flags, also known as options or switches, are special parameters used in command-line applications to modify or control the behavior of a specific command. Flags usually start with a single hyphen followed by a single letter (e.g., -a) or with two hyphens followed by a longer, descriptive word (e.g., --all). They are entered along with the command to provide additional instructions, customize the output, or enable/disable certain features. Flags can be combined, and some may require an accompanying value to specify the desired behavior further.",
        "section3_4": "As you can see, this brings up the help page for Hashcat. Typing 'hashcat --help' does the same thing. --help is a command flag.",
        "section3_5": "A hashed password is a way to protect and store a password securely by transforming it into a unique and fixed-size string of characters. Imagine a hashed password as a scrambled version of your original password that is difficult to decipher.\nWhen you create an account on a website, you usually provide a password. Instead of storing your password as-is, which would be insecure, the website uses a special mathematical function called a 'hashing algorithm' to convert your password into a seemingly random string of characters. This scrambled version is the hashed password\nThe hashing process is designed to be one-way, meaning it's very easy to create a hash from your password, but extremely difficult to reverse-engineer the original password from the hash. This provides an extra layer of security, as even if someone gains access to the hashed passwords, they still can't easily figure out the actual passwords.\nWhen you log in, the website hashes the password you provide and compares it to the stored hashed password. If they match, you're granted access. This way, the website can verify your password without ever knowing or storing the actual password itself.",
        "section3_6": "Now let's see what passwords we're cracking. Type 'ls' to see what files we have in our current directory.",
        "section3_7": "commonpasswords.txt - this is a list of common passwords. We will supply hashcat with this list. It will then hash each of the passwords in the list and compare it with each hash in hashes.txt. If they match, we have a cracked password! Let's have a look in these files - to do that, type 'cat hashes.txt'",
        "section3_8": "This looks pretty complicated, so let's break it down.\n'hashcat': we know what this does, we are running the hashcat tool\n'-a 0': -a is the attack mode flag, and 0 is standard attack mode. So with this we are saying 'use the standard mode for attacking'\n'-m 0': -m is the hash type flag, and 0 is MD5. So with this we are saying 'the hashed passwords in the file are of type MD5' (it is beyond the scope of this module to understand different hash types)\n'hashes.txt: We are telling hashcat that this is the file containing the hashed passwords\n'commonpasswords.txt': We are telling hashcat that this is the file with the passwords to try.\nNow type in the command and see what happens... (if you see the hashcat help page after typing in the command you didn't type it in correctly)",
        "section3_9": "We have two files: hashes.txt - this is a list of hashed passwords that we will crack",
        "section3_10": "We have 4 hashed passwords that we will crack. Now type 'cat commonpasswords.txt' to have a look in that file",
        "section3_11": "There are 12 passwords that hashcat will try. Now let's crack the hashed passwords. The command to do this is:",
        "section3_12": "Success! We managed to crack all 4 passwords. Hashcat displays it as [hashed password]:[cracked password]. The passwords were: password123, 123456, football and iloveyou. All of those passwords have consistently been the most commonly used passwords - especially 123456 as this is the most commonly used password globally.",
        "section3_13": "You now have a foundational understanding of how password cracking works, as well as how to use the Hashcat tool to crack hashed passwords",
        "section3_14": "You're going to use it to practice basic Hashcat commands. Begin by simply typing 'hashcat' in the terminal and press enter.",
        "section3_15": "Looks like you entered in the wrong command. Type 'clear' to restart."
    }
]
