[
    {
        "intro": "SQL (Structured Query Language) injection is one of the most common web hacking techniques. It is used to gain unauthorized access to a web application database by adding a string of malicious code to a database query.",
        "section1": "In short, SQL lets you access and manipulate databases. It is a standard programming language that you can use to retrieve, insert or update data in a database, create a new database or database table or even set permissions on tables. Below is an example of an SQL query:",
        "selectDescription": "This statement is used to select data from a database. You must specify which column you want to select directly after this statement.",
        "usernameDescription": "This is the specified column that the SELECT statement will use. It will be returned in a result table (also known as a result-set).",
        "fromDescription": "This statement is used to select from which table in the database the selected data should be retrieved. You must specify the table directly after this statement.",
        "usersDescription": "This is the specified table that the FROM statement will use.",
        "semiColonDescription": "Finally, the semi colon is used to terminate the query. It simply states that the query has ended.",
        "section2": "SQL injection is a technique used by attackers to exploit vulnerabilities in a web application's database layer by injecting malicious SQL code. SQL injections take advantage of improperly validated or unsanitized user inputs in applications to manipulate database operations. The attacker aims to manipulate the database by executing unauthorized SQL commands, potentially gaining unauthorized access to sensitive data, modifying or deleting records, and even executing administrative tasks.",
        "section3": "Attackers often use SQL injections to target applications that do not properly validate user inputs, particularly those that include forms, search fields, or login pages. Here's a (very simplified) step-by-step explanation of how an SQL injection attack works:\n\n",
        "section3_1": "1. The attacker identifies a vulnerable input field on a web application, such as a search box or a login form.\n\n2. The attacker crafts an SQL query containing malicious code and enters it into the vulnerable input field.\n\n3. The web application processes the input without validating or sanitizing it, allowing the attacker's SQL code to be executed alongside the application's legitimate SQL commands.\n\n4. The database management system (DBMS) processes the attacker's SQL commands, potentially leading to data breaches, unauthorized access, or other malicious actions.\n\n",
        "section3_2": "To better understand SQL injections, let's take a look at a simple example. Imagine a web application that uses the following SQL query to authenticate users:",
        "section3_3": "In this example, the application replaces [INPUT_USERNAME] and [INPUT_PASSWORD] with the user-supplied username and password from a login form. A user would typically enter their valid credentials, like this:",
        "section3_4": "The resulting SQL query would be:",
        "section3_5": "However, if an attacker enters the following input in the username field:",
        "section3_6": "The SQL query becomes:",
        "section3_7": "In this case, the OR 1=1 condition always evaluates as true, bypassing the intended authentication mechanism. The -- portion comments out the remaining part of the query, effectively ignoring the password check. Consequently, the attacker gains unauthorized access to the application.\n\nSQL injections can have severe consequences, including data breaches, unauthorized access, data manipulation or deletion, and the compromise of an entire application or system. It is crucial to understand and address this security vulnerability to ensure the safety of your application and its users."

    }
]
