[
    {
        "intro": "SQL (Structured Query Language) injection is one of the most common web hacking techniques. It is used to gain unauthorized access to a web application database by adding a string of malicious code to a database query.",
        "section1": "In short, SQL lets you access and manipulate databases. It is a standard programming language that you can use to retrieve, insert or update data in a database, create a new database or database table or even set permissions on tables. Below is an example of an SQL query:",
        "selectDescription": "This statement is used to select data from a database. You must specify which column you want to select directly after this statement.",
        "usernameDescription": "This is the specified column that the SELECT statement will use. It will be returned in a result table (also known as a result-set).",
        "fromDescription": "This statement is used to select from which table in the database the selected data should be retrieved. You must specify the table directly after this statement.",
        "usersDescription": "This is the specified table that the FROM statement will use.",
        "semiColonDescription": "Finally, the semi colon is used to terminate the query. It simply states that the query has ended.",
        "section2": "SQL injection is a technique used by attackers to exploit vulnerabilities in a web application's database layer by injecting malicious SQL code. SQL injections take advantage of improperly validated or unsanitized user inputs in applications to manipulate database operations. The attacker aims to manipulate the database by executing unauthorized SQL commands, potentially gaining unauthorized access to sensitive data, modifying or deleting records, and even executing administrative tasks.",
        "section3": "Attackers often use SQL injections to target applications that do not properly validate user inputs, particularly those that include forms, search fields, or login pages. Here's a step-by-step explanation of how an SQL injection attack works:\n\n",
        "section3_1": "1. The attacker identifies a vulnerable input field on a web application, such as a search box or a login form.\n\n2. The attacker crafts an SQL query containing malicious code and enters it into the vulnerable input field.\n\n3. The web application processes the input without validating or sanitizing it, allowing the attacker's SQL code to be executed alongside the application's legitimate SQL commands.\n\n4. The database management system (DBMS) processes the attacker's SQL commands, potentially leading to data breaches, unauthorized access, or other malicious actions.\n\n",
        "section3_2": "To better understand SQL injections, let's take a look at a simple example. Imagine a web application that uses the following SQL query to authenticate users:",
        "section3_3": "In this example, the application replaces [INPUT_USERNAME] and [INPUT_PASSWORD] with the user-supplied username and password from a login form. A user would typically enter their valid credentials, like this:",
        "section3_4": "The resulting SQL query would be:",
        "section3_5": "However, if an attacker enters the following input in the username field:",
        "section3_6": "The SQL query becomes:",
        "section3_7": "In this case, the OR 1=1 condition always evaluates as true, bypassing the intended authentication mechanism. The -- portion comments out the remaining part of the query, effectively ignoring the password check. Consequently, the attacker gains unauthorized access to the application.\n\nSQL injections can have severe consequences, including data breaches, unauthorized access, data manipulation or deletion, and the compromise of an entire application or system. It is crucial to understand and address this security vulnerability to ensure the safety of your application and its users.\n",
        "section4_1": "Below is a simulated login portal. The input boxes are vulnerable to an SQL Injection attack as they do not properly validate the input. ",
        "section4_2": "As you can see, it tells us that we entered something wrong, as it should. Now enter a single apostrophe (') into either input box and see what happens.",
        "section4_3": "As you can see, the apostrophe at the beginning closes the string for username. This now makes the OR 1=1 condition active SQL code, and it always evaluates as true, bypassing the intended authentication mechanism. The -- portion comments out the remaining part of the query, effectively ignoring the password check. Consequently, the attacker gains unauthorized access to the application.\n\nLet's continue on the next page where we learn a bit about how we can defend our databases from SQL injections...",
        "section4_4": "We're in! You successfully bypassed the login system by injecting a cleverly crafted malcious SQL payload. Have a look at how the query looks now.",
        "section4_5": "It says there's an error with SQL. That's because an apostrophe was entered, resulting in the query being malformed. Have a look at the query below to see what's now happening in the backend. Everything after 'username = ' is now a string, resulting in an invalid SQL query. Since the login portal is telling us that there is an SQL syntax error, we know that the input boxes aren't validated and we can bypass the login with a cleverly formed SQL query. In either input box, enter ' OR 1=1 --, and see what happens...",
        "section5_1": "To prevent SQL injections, it's crucial to ensure that user-supplied data is treated safely and separately from the SQL query itself. There are several ways of protecting against SQL injections, but here are three of the most common (and most effective) techniques to help you avoid SQL injection vulnerabilities:\n",
        "section5_2": "1. Use Prepared Statements and Parameterized Queries",
        "section5_3": "Prepared statements, also known as parameterized queries, are a technique where you separate the user-supplied data from the SQL query itself. This is done by using placeholders in the query, which are then replaced with the actual data when the query is executed. By keeping the data separate, it becomes impossible for an attacker to inject malicious code into the query.\n\nTo use prepared statements, you'll need to take advantage of features provided by your programming language and database management system (DBMS). Many popular languages like PHP, C#, and Java offer built-in support for prepared statements.\n\nFor example, in PHP, you can use the PDO (PHP Data Objects) library to create prepared statements like this:",
        "section5_4": "In this example, :username and :email are placeholders that will be replaced with the actual user-supplied data when the query is executed.",
        "section5_5": "2. Use an Object-Relational Mapping (ORM) Library:",
        "section5_6": "An Object-Relational Mapping (ORM) library is a tool that helps you interact with your database in a more abstract and secure way. Instead of writing raw SQL queries, you use the ORM library to define and manipulate your data as objects in your programming language. The ORM library then translates these operations into the appropriate SQL queries for your database.\n\nBy using an ORM library, you can avoid manually constructing SQL queries with user-supplied data, significantly reducing the risk of SQL injections. There are many ORM libraries available for different programming languages, such as Django's ORM for Python, Entity Framework for C#, and Sequelize for JavaScript.",
        "section5_7": "3. Validate and Sanitize User Input:",
        "section5_8": "Always validate and sanitize any data that comes from users before using it in your application. Validation ensures that the data meets specific criteria, such as being the correct data type or within a certain range of values. Sanitization, on the other hand, removes or modifies any potentially harmful characters or content from the data.\n\nBy validating and sanitizing user input, you can further reduce the risk of SQL injections by ensuring that only safe and expected data is used in your SQL queries.",
        "conclusion": "In conclusion, preventing SQL injections is an essential part of securing your application and protecting sensitive data. By using prepared statements, employing an ORM library, and validating and sanitizing user input, you can significantly reduce the risk of SQL injection vulnerabilities.",
        "query1": "SELECT username FROM users;",
        "query2": "SELECT * FROM users WHERE username = '[INPUT_USERNAME]' AND password = '[INPUT_PASSWORD]';",
        "query3": "SELECT * FROM users WHERE username = 'johndoe' AND password = 'mySecurePass';",
        "query4": "' OR 1=1 --",
        "query5": "SELECT * FROM users WHERE username = '' OR 1=1 --'AND‎‎‎‎ㅤㅤㅤㅤ‎password='[INPUT_PASSWORD]';",
        "query6": "SELECT * FROM users WHERE username = '''ANDpassword=''';",
        "query7": "SELECT * FROM users WHERE username = '' OR 1=1 --'ANDpassword=''"

    }
]
